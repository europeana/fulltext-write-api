<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <modules>
    <module>api</module>
  </modules>

  <parent>
    <groupId>eu.europeana</groupId>
    <artifactId>europeana-parent-pom</artifactId>
    <version>2.2</version>
  </parent>

  <groupId>eu.europeana.api</groupId>
  <artifactId>fulltext-write</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>Fulltext Write API</name>
  <description>API that manages updates to the fulltext infrastructure</description>

  <properties>
    <java.version>11</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <spring-boot.version>2.5.5</spring-boot.version>
    <swagger.version>3.0.0</swagger.version>
    <api.commons.version>0.3.10-SNAPSHOT</api.commons.version>
    <api.fulltext.version>0.8.2-SNAPSHOT</api.fulltext.version>
    <springbatch.mongo.version>1.0.5</springbatch.mongo.version>
    <git-code-format.version>3.1</git-code-format.version>
    <morphia.version>2.1.4</morphia.version>
    <snappy.version>1.1.7.2</snappy.version>
    <testcontainers.version>1.16.0</testcontainers.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <!-- Import dependency management from Spring Boot (because we don't use Spring-Boot as parent pom)-->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers</artifactId>
        <version>${testcontainers.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>junit-jupiter</artifactId>
        <version>${testcontainers.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <!--  allow Maven to manipulate resource files as a part of the build process.
           build.properties by default is expanded by spring-boot-maven-plugin
    -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.0.0-M5</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <classesDirectory>${project.build.directory}/classes</classesDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>add-integration-test-source</id>
            <!-- Normally this would be attached to the generate-test-source phase,
              however we attach to generate-sources so that the git-code-format plugin can pick
              up integration test source files (see plugin config above) -->
            <phase>generate-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <!-- Configures the source directory of our integration tests -->
              <sources>
                <source>src/integration-test/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-integration-test-resources</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <!-- Configures the resource directory of our integration tests -->
              <resources>
                <resource>
                  <filtering>true</filtering>
                  <directory>src/integration-test/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.cosium.code</groupId>
        <artifactId>git-code-format-maven-plugin</artifactId>
        <version>${git-code-format.version}</version>
        <executions>
          <!-- Install git pre-commit hook -->
          <execution>
            <id>install-formatter-hook</id>
            <goals>
              <goal>install-hooks</goal>
            </goals>
          </execution>
          <!-- Format source files -->
          <execution>
            <id>format-code</id>
            <phase>process-sources</phase>
            <goals>
              <goal>format-code</goal>
            </goals>
          </execution>
          <!-- On Maven verify phase, fail if any file
          (including unmodified) is badly formatted -->
          <execution>
            <id>validate-code-format</id>
            <phase>verify</phase>
            <goals>
              <goal>validate-code-format</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
